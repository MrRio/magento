<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>
<div class="entry-edit">
    <div class="entry-edit-head">
        <h4 class="icon-head head-edit-form fieldset-legend"><?php echo Mage::helper('adminhtml')->__('Product Categories') ?></h4>
    </div>
    <fieldset id="grop_fields">
        <input type="hidden" name="categories" id="product_categories" value="">
        <div id="tree-div" class="tree" style="width:auto;"></div>
    </fieldset>
    <div>
    Note: if selected product or category has been associated in this module, you can't select one of them.
    </div>
</div>
<?php if($this->getRootNode() && $this->getRootNode()->hasChildren()): ?>
<script type="text/javascript">
var _root = '';
var _tree = '';
Ext.EventManager.onDocumentReady(function() {
	var tree = new Ext.tree.TreePanel('tree-div', {
        animate:false,
        loader: false,
        enableDD:false,
        containerScroll: true,
		rootUIProvider: Ext.tree.CheckboxNodeUI,
		selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
		rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>'
	});


	tree.on('check', function(node) {
		 //this.getEnableAndChecked().join(',');
		//!node.checked()) {
		//	this.enableAllUnchecked();
		//}
		if (!node.attributes.checked){
			tree.enableAllUnchecked();
			$('product_categories').value = '';
		} else {
			tree.disableAllUnchecked();
			$('product_categories').value = node.id;
			urlrewrite.showForm1();
			$('category_id').value = node.id;
			$('id_path').value += ($('product_id').value ? '/' : 'category/')+ node.id;
			$('target_path').value += ($('product_id').value ? '/category/': 'catalog/category/view/id/')+node.id;
			$('request_path').value = $('product_id').value ? tree.getHirechyName(node).reverse().join('/') + '/' + $('request_path').value : tree.getHirechyName(node).reverse().join('/');
			//if (!$('product_id').value) $('product_name').innerHTML = 'N/A';
			//var elems = $('add_urlrewrite_form').childElements();

			if ($('product_id').value) {
			    toggleElements($('add_urlrewrite_form'), ['category_name', 'id_path', 'target_path']);
			} else {
			    $('category_name').innerHTML = tree.getHirechyName(node).reverse().join('/');
			    toggleElements($('add_urlrewrite_form'), ['product_name', 'id_path', 'target_path']);
			}

		}
	}, tree);

	// set the root node
    var root = new Ext.tree.TreeNode({
        text: '<?php echo $this->getRootNode()->getName() ?>',
        draggable:false,
        checked:'<?php echo $this->getRootNode()->getChecked() ?>',
        id:'<?php echo $this->getRootNode()->getId() ?>',
        uiProvider: Ext.tree.CheckboxNodeUI
    });

    _tree = tree;
    _root = root;

	tree.setRootNode(root);
	//buildCategoryTree(root, <?php echo $this->getTreeJson() ?>);
    tree.addListener('click', categoryClick.createDelegate(this));

    // render the tree
    tree.render();
    root.expand();
    tree.expandAll();

    //$('product_categories').value = tree.getChecked().join(',');
});

function buildCategoryTree(parent, config){
    if (!config) return null;

    if (parent && config && config.length){
        for (var i = 0; i < config.length; i++){
            config[i].uiProvider = Ext.tree.CheckboxNodeUI;
            var node = new Ext.tree.TreeNode(config[i]);
            parent.appendChild(node);
            if(config[i].children){
                buildCategoryTree(node, config[i].children);
            }
        }
    }
}

function categoryClick(node, e){
	if (!node.getUI().checkbox.disabled) {
    	node.getUI().check(!node.getUI().checked())
	}
    varienElementMethods.setHasChanges(Event.element(e), e);
};

Ext.tree.TreePanel.prototype.disableChecked = function(node){
    var i;
    if( typeof node == 'undefined' ) {
        node = this.rootVisible ? this.getRootNode() : this.getRootNode().firstChild;
    }

    if (node.getUI().checked()) node.getUI().checkbox.disabled = true;

	for( i = 0; i < node.childNodes.length; i++ ) {
          this.disableChecked(node.childNodes[i]);
    }
};

Ext.tree.TreePanel.prototype.disableAllUnchecked = function(node){
    var i;
    if( typeof node == 'undefined' ) {
        node = this.rootVisible ? this.getRootNode() : this.getRootNode().firstChild;
    }

    if (!node.getUI().checked()) {
    	node.disabled = false;
    	node.getUI().checkbox.disabled = true;
    }

	for( i = 0; i < node.childNodes.length; i++ ) {
          this.disableAllUnchecked(node.childNodes[i]);
    }
};

Ext.tree.TreePanel.prototype.enableAllUnchecked = function(node){
    var i;
    if( typeof node == 'undefined' ) {
        node = this.rootVisible ? this.getRootNode() : this.getRootNode().firstChild;
    }

    if (!node.getUI().checked()) {
    	node.disabled = true;
    	node.getUI().checkbox.disabled = false;
    }

	for( i = 0; i < node.childNodes.length; i++ ) {
          this.enableAllUnchecked(node.childNodes[i]);
    }
};

Ext.tree.TreePanel.prototype.getEnableAndChecked = function(node){
	var checked = [], i;
	if( typeof node == 'undefined' ) {
		node = this.rootVisible ? this.getRootNode() : this.getRootNode().firstChild;
	}

	if( node.attributes.checked && !node.disabled ) {
		checked.push(node.id);
		if( !node.isLeaf() ) {
			for( i = 0; i < node.childNodes.length; i++ ) {
				checked = checked.concat( this.getEnableAndChecked(node.childNodes[i]) );
			}
		}
	}
	return checked;
};

Ext.tree.TreePanel.prototype.getHirechyName = function(node){
    var checked = [] , i, id = $('product_categories').value, text;
    if( typeof node == 'undefined' ) {
        node = this.rootVisible ? this.getRootNode() : this.getRootNode().firstChild;
    }

    text = node.text.split('(')[0].trim().toLowerCase();
    if (!(text.match(/root/i) || text.match(/default/i))   && text != 'undefined') checked.unshift(text);
    if (node.parentNode) {
    	checked = checked.concat(this.getHirechyName(node.parentNode));
    }

    return checked;
};


</script>
<?php endif; ?>